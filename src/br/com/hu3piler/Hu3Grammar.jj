/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Hu3Grammar)package br.com.hu3piler;

public class Hu3Grammar{  public static void main(String args []) throws ParseException  {    Hu3Grammar parser = new Hu3Grammar(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (Hu3Grammar.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        Hu3Grammar.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(Hu3Grammar)SKIP :{  " "| "\r"| "\t"| "\n"}
SKIP : { "/*" : multiLineComment }

<multiLineComment>

SKIP: { "*/" : DEFAULT | <~[]> }

SKIP : { "//" : lineComment }

<lineComment>

SKIP: { "\n" : DEFAULT | <~[]> }

TOKEN :
{
        < NUMBER : (["0" - "9"])*(".")?(["0" - "9"])+ > 
    |   < STRING : ("\"")(~["\""])*("\"") >
    |   < VAR : ("_")(["a"-"z"]|["A"-"Z"])(["a"-"z"]|["A"-"Z"]|["0"-"9"])* >
    |   < ATRIB : "=" >
    |   < SHOW : "exibe" >
    |   < READ : "leia" >
    |   < TYPENUM : "numero" >
    |   < TYPESTRING : "string" >
    |   < PARL : "(" >
    |   < PARR : ")" >
    |   < POT : "^" >
    |   < MUL : "*" >
    |   < DIV : "/" >
    |   < ADD : "+" >
    |   < SUB : "-" >
    |   < BIGGER : ">" >
    |   < LESS : "<" >
    |   < BIGEQUAL : ">=" >
    |   < LESSEQUAL : "<=" >
    |   < DIFFERENT : "!=" >
    |   < COMPARE : "==" >
    |   < AND : "e" >
    |   < OR : "ou" >
    |   < NOT : "nao" >
    |   < SPECIALOR : "OU" >
    |   < IF : "se" >
    |   < ELSIF : "senaoSe" >
    |   < ELSE : "senao" >
    |   < ENDIF : "fimSe" >
    |   < CHOOSE : "escolha" >
    |   < CASE : "caso" >
    |   < OTHERS : "outros" >
    |   < ENDCHOOSE : "fimEscolha" >
    |   < WHILE : "enquanto" >
    |   < ENDWHILE : "fimEnquanto" >
    |   < FOR : "para" >
    |   < UNTIL : "ate" >
    |   < MOVE : "passo" >
    |   < ENDFOR : "fimPara" >
    |   < DOTCOMMA : ";" >
    |   < COMMA : "," >
}TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >}int one_line() :{}{  sum() ";"  {    return 0;  }| ";"  {    return 1;  }}void sum() :{}{  term()  (    (      < PLUS >    | < MINUS >    )    term()  )*}void term() :{}{  unary()  (    (      < MULTIPLY >    | < DIVIDE >    )    unary()  )*}void unary() :{}{  < MINUS > element()| element()}void element() :{}{  < CONSTANT >| "(" sum() ")"}
